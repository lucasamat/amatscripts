# ====================================================================================================
#   __script_name : SYUROLESTN.PY
#   __script_description : This script is used to load tree view structure in Roles Tab(In System Admin )
#   __primary_author__ : JOE EBENZER
#   __create_date : 31/08/2020
# ====================================================================================================
import Webcom.Configurator.Scripting.Test.TestProduct
import sys
from SYDATABASE import SQL
Sql = SQL()

TestProduct = Webcom.Configurator.Scripting.Test.TestProduct()
TestProduct.ChangeTab("Role")
Product.Attributes.GetByName("MA_MTR_ACTIVE_TAB").AssignValue("Role")
tabs = Product.Tabs

for tab in Product.Tabs:
	if tab.IsSelected==True:
		if Product.Attributes.GetByName("MA_MTR_ACTIVE_TAB") is not None:
			if str(tab.Name)!="Roles" and str(tab.Name)!="Role":
				Product.Attributes.GetByName("MA_MTR_ACTIVE_TAB").AssignValue('Roles')
				
				
TestProduct=Webcom.Configurator.Scripting.Test.TestProduct()
TabName=str(TestProduct.CurrentTab)

if Product.Attributes.GetByName('BTN_ROLE_BACK_TO_LIST'):
	Product.Attributes.GetByName('BTN_ROLE_BACK_TO_LIST').Allowed = True;
	Product.Attributes.GetByName('BTN_ROLE_BACK_TO_LIST').HintFormula = "BACK TO LIST";

def RolesTreeView(role_id):
	
	objR_obj=[]
	try:
		current_prod = Product.Name
	except:
		current_prod = ''
	
	
	objR_obj=[]

	nodeId=0
	objrList=['Role Information','Users']
	
	ProductDict={}
	ChildList=[]
	returnList = []
	ProductList = []
	Firstnode='Role Information'
	returnList = []
	
	for data in objrList:
		ProductDict = {}
		ProductDict["text"] = str(data)
		ProductDict["nodeId"] = int(nodeId)
		nodeId = int(nodeId) + 1
		AppsubDict={}
		Appsublist=[]
		childsublist = []
		listvar = []
		returnList.append(ProductDict)
	Product.SetGlobal('ProfileTreeList',str(returnList))
	return returnList,objrList

LOAD = Param.LOAD
if LOAD == 'RoleTreeload':
	role_id = Param.Role_id
	ApiResponse = ApiResponseFactory.JsonResponse(RolesTreeView(role_id))